import numpy as np
import matplotlib.pyplot as plt
import h5py
import scipy
from PIL import Image
from scipy import ndimage
from lr_utils import load_dataset



# Loading the data (cat/non-cat)
train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()

#ploting the picture. 
plt.imshow(train_set_x_orig[index])

#m_train is the no of training examples
m_train = train_set_x_orig.shape[0]

#m_test is the no of test examples
m_test = test_set_x_orig.shape[0]

num_px is the number of pixcels, generally a picture is num_px*num_px*3 , the factor 3 is multiplied for green , red and yellow color
num_px = train_set_x_orig.shape[1]

#now the images are made into a vector i.e. a image which is of size  num_px*num_px*3 is adjusted linearly and matrix is formed of shape
#[train_set_x_orig.shape[1]*train_set_x_orig.shape[2]*train_set_x_orig.shape[3],m_train]
train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[1]*train_set_x_orig.shape[2]*train_set_x_orig.shape[3],m_train)

#simpler way to create a matrix of same dimension as above.
test_set_x_flatten = test_set_x_orig.reshape(m_test,-1).T

#preprocess the image 
train_set_x = train_set_x_flatten/255.
test_set_x = test_set_x_flatten/255.

# Compute the sigmoid of z
#z scalar or numpy array of any size
def sigmoid(z):

    s = 1/(1+np.exp(-z))    
    return s

#This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.
"""
    Returns:
    w -- initialized vector of shape (dim, 1)
    b -- initialized scalar (corresponds to the bias)
"""
def initialize_with_zeros(dim):

    w = np.zeros([dim,1])
    b = 0
    assert(w.shape == (dim, 1))
    assert(isinstance(b, float) or isinstance(b, int))
 
    return w, b
    
 def propagate(w, b, X, Y):
    
     m = X.shape[1]
     temp = np.dot(w.T, X)+b
    
     A = sigmoid(temp)                                    # compute activation
     cost =  (-1)*(((Y*np.log(A) + (1-Y)*np.log(1-A)).sum(axis=1))/m)
     dw = (np.dot(X,(A-Y).T))/m
     db = ((A-Y).sum(axis=1))/m
     
         assert(dw.shape == w.shape)
    assert(db.dtype == float)
    cost = np.squeeze(cost)
       
    grads = {"dw": dw,
             "db": db}
    
    return grads, cost
    

def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):
    costs = []
    
    for i in range(num_iterations):
        grads, cost = propagate(w, b, X, Y)
        dw = grads["dw"]
        db = grads["db"]
        w = w - learning_rate*dw
        b = b - learning_rate*db
         if i % 100 == 0:
            costs.append(cost)
         if print_cost and i % 100 == 0:
            print ("Cost after iteration %i: %f" %(i, cost))
            
    params = {"w": w, "b": b}
    
    grads = {"dw": dw,"db": db}
    return params, grads, costs
    

#Predict whether the label is 0 or 1 using learned logistic regression parameters (w, b)
# Returns:
#    Y_prediction -- a numpy array (vector) containing all predictions (0/1) for the examples in X
def predict(w, b, X):

    m = X.shape[1]
    Y_prediction = np.zeros((1,m))
    w = w.reshape(X.shape[0], 1)

    temp = np.dot(w.T, X)+b
    A = sigmoid(temp)  
    for i in range(A.shape[1]):
        # Convert probabilities A[0,i] to actual predictions p[0,i]
        if A[0][i] > 0.5:
            Y_prediction[0][i] = 1
    
        else:
             Y_prediction[0][i] = 0
    
    assert(Y_prediction.shape == (1, m))
    
    return Y_prediction
    
#Builds the logistic regression model by calling the function implemented 
"""
Arguments:
    X_train -- training set represented by a numpy array of shape (num_px * num_px * 3, m_train)
    Y_train -- training labels represented by a numpy array (vector) of shape (1, m_train)
    X_test -- test set represented by a numpy array of shape (num_px * num_px * 3, m_test)
    Y_test -- test labels represented by a numpy array (vector) of shape (1, m_test)
    num_iterations -- hyperparameter representing the number of iterations to optimize the parameters
    learning_rate -- hyperparameter representing the learning rate used in the update rule of optimize()
    print_cost -- Set to true to print the cost every 100 iterations
    
    Returns:
    d -- dictionary containing information about the model.
"""
def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):

    # initialize parameters with zeros
    w, b = initialize_with_zeros(num_px * num_px * 3)

    # Gradient descent
    parameters, grads, costs =  optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost = False)
    
    # Retrieve parameters w and b from dictionary "parameters"
    w = parameters["w"]
    b = parameters["b"]
    
    # Predict test/train set examples (â‰ˆ 2 lines of code)
    Y_prediction_test = predict(w,b,X_test)
    Y_prediction_train = predict(w,b,X_train)

    # Print train/test Errors
    print("train accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))
    print("test accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))

    d = {"costs": costs,
         "Y_prediction_test": Y_prediction_test, 
         "Y_prediction_train" : Y_prediction_train, 
         "w" : w, 
         "b" : b,
         "learning_rate" : learning_rate,
         "num_iterations": num_iterations}
    
    return d
